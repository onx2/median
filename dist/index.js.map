{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["function swap(arr: number[], i: number, j: number): void {\n  const temp = arr[i]!;\n  arr[i] = arr[j]!;\n  arr[j] = temp;\n}\n\n// Typescript implementation of C quickselect\n// http://ndevilla.free.fr/median/median/\n// http://ndevilla.free.fr/median/median/src/quickselect.c\nexport function median(arr: number[], n: number): number {\n  function quickSelectInternal(\n    arr: number[],\n    low: number,\n    high: number,\n    k: number,\n  ): number {\n    while (true) {\n      if (high <= low) {\n        return arr[k]!;\n      }\n\n      if (high === low + 1) {\n        if (arr[low]! > arr[high]!) {\n          swap(arr, low, high);\n        }\n        return arr[k]!;\n      }\n\n      // Find median of low, middle, and high items; swap into position low\n      const middle = Math.floor((low + high) / 2);\n\n      if (arr[middle]! > arr[high]!) swap(arr, middle, high);\n      if (arr[low]! > arr[high]!) swap(arr, low, high);\n      if (arr[middle]! > arr[low]!) swap(arr, middle, low);\n\n      // Swap low item (now in position middle) into position (low + 1)\n      swap(arr, middle, low + 1);\n\n      // Nibble from each end towards middle, swapping items when stuck\n      let ll = low + 1;\n      let hh = high;\n\n      while (true) {\n        do ll++;\n        while (arr[ll]! < arr[low]!);\n        do hh--;\n        while (arr[hh]! > arr[low]!);\n\n        if (hh < ll) break;\n\n        swap(arr, ll, hh);\n      }\n\n      // Swap middle item (in position low) back into the correct position\n      swap(arr, low, hh);\n\n      // Re-set active partition\n      if (hh <= k) low = ll;\n      if (hh >= k) high = hh - 1;\n    }\n  }\n\n  const mid = Math.floor((n - 1) / 2);\n\n  if (n % 2 === 1) {\n    // Odd-length array: return the middle element\n    return quickSelectInternal(arr, 0, n - 1, mid);\n  } else {\n    // Even-length array: return the average of the two middle elements\n    const leftMid = quickSelectInternal(arr, 0, n - 1, mid);\n    const rightMid = quickSelectInternal(arr, 0, n - 1, mid + 1);\n    return (leftMid + rightMid) / 2;\n  }\n}\n"],"names":["swap","arr","i","j","temp","median","quickSelectInternal","low","high","k","middle","ll","hh","mid","leftMid","rightMid"],"mappings":"gFAAA,SAASA,EAAKC,EAAeC,EAAWC,EAAiB,CACjD,MAAAC,EAAOH,EAAIC,CAAC,EACdD,EAAAC,CAAC,EAAID,EAAIE,CAAC,EACdF,EAAIE,CAAC,EAAIC,CACX,CAKgB,SAAAC,EAAOJ,EAAe,EAAmB,CACvD,SAASK,EACPL,EACAM,EACAC,EACAC,EACQ,CACR,OAAa,CACX,GAAID,GAAQD,EACV,OAAON,EAAIQ,CAAC,EAGV,GAAAD,IAASD,EAAM,EACjB,OAAIN,EAAIM,CAAG,EAAKN,EAAIO,CAAI,GACjBP,EAAAA,EAAKM,EAAKC,CAAI,EAEdP,EAAIQ,CAAC,EAId,MAAMC,EAAS,KAAK,OAAOH,EAAMC,GAAQ,CAAC,EAEtCP,EAAIS,CAAM,EAAKT,EAAIO,CAAI,GAAIR,EAAKC,EAAKS,EAAQF,CAAI,EACjDP,EAAIM,CAAG,EAAKN,EAAIO,CAAI,GAAIR,EAAKC,EAAKM,EAAKC,CAAI,EAC3CP,EAAIS,CAAM,EAAKT,EAAIM,CAAG,GAAIP,EAAKC,EAAKS,EAAQH,CAAG,EAG9CN,EAAAA,EAAKS,EAAQH,EAAM,CAAC,EAGzB,IAAII,EAAKJ,EAAM,EACXK,EAAKJ,EAET,OAAa,CACX,GAAGG,UACIV,EAAIU,CAAE,EAAKV,EAAIM,CAAG,GACzB,GAAGK,UACIX,EAAIW,CAAE,EAAKX,EAAIM,CAAG,GAEzB,GAAIK,EAAKD,EAAI,MAERV,EAAAA,EAAKU,EAAIC,CAAE,CAClB,CAGKX,EAAAA,EAAKM,EAAKK,CAAE,EAGbA,GAAMH,IAASF,EAAAI,GACfC,GAAMH,IAAGD,EAAOI,EAAK,EAC3B,CACF,CAEA,MAAMC,EAAM,KAAK,OAAO,EAAI,GAAK,CAAC,EAE9B,GAAA,EAAI,IAAM,EAEZ,OAAOP,EAAoBL,EAAK,EAAG,EAAI,EAAGY,CAAG,EACxC,CAEL,MAAMC,EAAUR,EAAoBL,EAAK,EAAG,EAAI,EAAGY,CAAG,EAChDE,EAAWT,EAAoBL,EAAK,EAAG,EAAI,EAAGY,EAAM,CAAC,EAC3D,OAAQC,EAAUC,GAAY,CAChC,CACF"}